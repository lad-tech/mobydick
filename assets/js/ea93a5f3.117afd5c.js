"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5137],{4832:(e,s,o)=>{o.r(s),o.d(s,{assets:()=>a,contentTitle:()=>d,default:()=>x,frontMatter:()=>c,metadata:()=>i,toc:()=>u});var n=o(5893),t=o(1151),r=o(2004),p=o.n(r);const l=o.p+"assets/medias/PopupBase-405fde0fe7539044013a87354b245ffa.mov",c={},d=void 0,i={id:"core/popups/PopupBase",title:"PopupBase",description:"Reusable PopupBase component",source:"@site/docs/core/popups/PopupBase.mdx",sourceDirName:"core/popups",slug:"/core/popups/PopupBase",permalink:"/mobydick/docs/core/popups/PopupBase",draft:!1,unlisted:!1,editUrl:"https://github.com/lad-tech/mobydick/tree/main/docs/docs/core/popups/PopupBase.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"TooltipBase",permalink:"/mobydick/docs/core/popups/tooltip/TooltipBase"},next:{title:"Progress",permalink:"/mobydick/docs/category/progress"}},a={},u=[{value:"Example",id:"example",level:2},{value:"<code>Props</code>",id:"props",level:2},{value:'<div class="label required basic">Required</div><strong><code>onClose</code></strong>',id:"requiredonclose",level:3},{value:"<code>overlayStyle</code>",id:"overlaystyle",level:3}];function h(e){const s={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.a)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(p(),{playing:!0,controls:!0,url:l}),"\n",(0,n.jsx)(s.p,{children:"Reusable PopupBase component"}),"\n",(0,n.jsx)(s.h2,{id:"example",children:"Example"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-tsx",children:"import {\n  Button,\n  createStyles,\n  PopupBase,\n  Typography,\n  usePopups,\n  useStyles,\n  View,\n} from '@lad-tech/mobydick-core';\n\nexport const PopupBaseWidget = () => {\n  const [styles] = useStyles(styleFn);\n  const {openPopup} = usePopups();\n\n  return (\n    <View style={styles.container}>\n      <Typography font={'Regular-Primary-H5'}>Popup</Typography>\n      <Button\n        text={'PopupBase'}\n        onPress={() =>\n          openPopup({\n            Content: props => <PopupBase {...props}></PopupBase>,\n          })\n        }\n      />\n    </View>\n  );\n};\n\nconst styleFn = createStyles(({spaces}) => ({\n  container: {\n    gap: spaces.Space8,\n  },\n}));\n\n"})}),"\n",(0,n.jsx)(s.h2,{id:"props",children:(0,n.jsx)(s.code,{children:"Props"})}),"\n",(0,n.jsxs)(s.h3,{id:"requiredonclose",children:[(0,n.jsx)("div",{class:"label required basic",children:"Required"}),(0,n.jsx)(s.strong,{children:(0,n.jsx)(s.code,{children:"onClose"})})]}),"\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsx)(s.tr,{children:(0,n.jsx)(s.th,{style:{textAlign:"left"},children:"TYPE"})})}),(0,n.jsx)(s.tbody,{children:(0,n.jsx)(s.tr,{children:(0,n.jsx)(s.td,{style:{textAlign:"left"},children:"() => void"})})})]}),"\n",(0,n.jsx)(s.p,{children:"Function for close PopupBase"}),"\n",(0,n.jsx)(s.h3,{id:"overlaystyle",children:(0,n.jsx)(s.code,{children:"overlayStyle"})}),"\n",(0,n.jsxs)(s.table,{children:[(0,n.jsx)(s.thead,{children:(0,n.jsx)(s.tr,{children:(0,n.jsx)(s.th,{style:{textAlign:"left"},children:"TYPE"})})}),(0,n.jsx)(s.tbody,{children:(0,n.jsx)(s.tr,{children:(0,n.jsx)(s.td,{style:{textAlign:"left"},children:(0,n.jsx)(s.a,{href:"https://reactnative.dev/docs/view-style-props#props",children:"ViewStyle"})})})})]}),"\n",(0,n.jsx)(s.p,{children:"Custom styles for PopupBase"})]})}function x(e={}){const{wrapper:s}={...(0,t.a)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}}}]);