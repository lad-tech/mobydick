"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[8811],{50:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>h,toc:()=>x});var s=n(5893),l=n(1151),c=n(2004),o=n.n(c);const d=n.p+"assets/medias/Button-5bef4d31f9d6d5ad9b4af9af5a0f5d1e.mov",i={},r=void 0,h={id:"components/core/cta/Button",title:"Button",description:"Reusable button component",source:"@site/docs/components/core/cta/Button.mdx",sourceDirName:"components/core/cta",slug:"/components/core/cta/Button",permalink:"/mobydick/docs/components/core/cta/Button",draft:!1,unlisted:!1,editUrl:"https://github.com/lad-tech/mobydick/tree/main/docs/docs/components/core/cta/Button.mdx",tags:[],version:"current",frontMatter:{},sidebar:"componentsSidebar",previous:{title:"CTA",permalink:"/mobydick/docs/category/cta"},next:{title:"Inputs",permalink:"/mobydick/docs/category/inputs"}},a={},x=[{value:"Example",id:"example",level:2},{value:"<code>Props</code>",id:"props",level:2},{value:"<code>TouchableOpacity Props</code>",id:"touchableopacity-props",level:3},{value:"<code>type</code>",id:"type",level:3},{value:"<code>size</code>",id:"size",level:3},{value:"<code>text</code>",id:"text",level:3},{value:"<code>textStyle</code>",id:"textstyle",level:3},{value:"<code>textProps</code>",id:"textprops",level:3},{value:"<code>font</code>",id:"font",level:3},{value:"<code>loading</code>",id:"loading",level:3},{value:"<code>count</code>",id:"count",level:3},{value:"<code>leftIcon</code>",id:"lefticon",level:3},{value:"<code>rightIcon</code>",id:"righticon",level:3}];function p(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,l.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(o(),{playing:!0,controls:!0,url:d}),"\n",(0,s.jsx)(t.p,{children:"Reusable button component"}),"\n",(0,s.jsx)(t.h2,{id:"example",children:"Example"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",children:"import {useState} from 'react';\n\nimport {\n  Button,\n  createStyles,\n  IButtonSize,\n  IButtonTypes,\n  SimpleIcon,\n  useStyles,\n  View,\n} from '@lad-tech/mobydick-core';\n\nexport const ButtonWidget = () => {\n  const [styles] = useStyles(style);\n  const [counter, setCounter] = useState(99);\n\n  const onChangeCounter = (value: number) => () => {\n    setCounter(val => val + value);\n  };\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.content}>\n        <Button type={IButtonTypes.primary} text={'IButtonTypes.primary'} />\n        <Button type={IButtonTypes.secondary} text={'IButtonTypes.secondary'} />\n        <Button type={IButtonTypes.tertiary} text={'IButtonTypes.tertiary'} />\n        <Button type={IButtonTypes.loading} text={'IButtonTypes.loading'} />\n        <Button\n          type={IButtonTypes.destructive}\n          text={'IButtonTypes.destructive'}\n        />\n        <Button type={IButtonTypes.disabled} text={'IButtonTypes.disabled'} />\n      </View>\n\n      <View style={styles.content}>\n        <Button size={IButtonSize.fixed} text={'IButtonSize.fixed'} />\n        <Button size={IButtonSize.large} text={'IButtonSize.large'} />\n        <Button size={IButtonSize.small} text={'IButtonSize.small'} />\n      </View>\n\n      <View style={styles.content}>\n        <Button\n          text={'leftIcon'}\n          leftIcon={<SimpleIcon name={'icon-send'} />}\n        />\n        <Button\n          text={'rightIcon'}\n          rightIcon={<SimpleIcon name={'icon-send'} />}\n        />\n        <Button\n          text={'both'}\n          leftIcon={<SimpleIcon name={'icon-send'} />}\n          rightIcon={<SimpleIcon name={'icon-send'} />}\n        />\n      </View>\n\n      <View style={styles.content}>\n        <Button text={'loading'} loading={true} />\n        <Button text={'disabled'} disabled={true} />\n        <Button text={'both'} disabled={true} loading={true} />\n      </View>\n\n      <View style={styles.content}>\n        <Button\n          text={'increment'}\n          count={counter}\n          onPress={onChangeCounter(1)}\n        />\n        <Button\n          text={'decrement'}\n          count={counter}\n          onPress={onChangeCounter(-1)}\n        />\n      </View>\n    </View>\n  );\n};\n\nconst style = createStyles(({spaces}) => ({\n  container: {\n    gap: spaces.Space4,\n  },\n  content: {\n    alignItems: 'center',\n    gap: spaces.Space4,\n  },\n}));\n\n\n"})}),"\n",(0,s.jsx)(t.p,{children:"textProps?: TextProps;"}),"\n",(0,s.jsx)(t.h2,{id:"props",children:(0,s.jsx)(t.code,{children:"Props"})}),"\n",(0,s.jsx)(t.h3,{id:"touchableopacity-props",children:(0,s.jsx)(t.a,{href:"https://reactnative.dev/docs/touchableopacity#props",children:(0,s.jsx)(t.code,{children:"TouchableOpacity Props"})})}),"\n",(0,s.jsxs)(t.p,{children:["Inherits ",(0,s.jsx)(t.a,{href:"https://reactnative.dev/docs/touchableopacity#props",children:"TouchableOpacity Props"}),"."]}),"\n",(0,s.jsx)(t.h3,{id:"type",children:(0,s.jsx)(t.code,{children:"type"})}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsx)(t.tr,{children:(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"TYPE"})})}),(0,s.jsx)(t.tbody,{children:(0,s.jsx)(t.tr,{children:(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.a,{href:"https://github.com/lad-tech/mobydick/blob/main/packages/core/src/cta/components/Button/types.ts#L20",children:"IButtonTypes"})})})})]}),"\n",(0,s.jsx)(t.p,{children:"Predefined type for button"}),"\n",(0,s.jsx)(t.h3,{id:"size",children:(0,s.jsx)(t.code,{children:"size"})}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsx)(t.tr,{children:(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"TYPE"})})}),(0,s.jsx)(t.tbody,{children:(0,s.jsx)(t.tr,{children:(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.a,{href:"https://github.com/lad-tech/mobydick/blob/main/packages/core/src/cta/components/Button/types.ts#L29",children:"IButtonSize"})})})})]}),"\n",(0,s.jsx)(t.p,{children:"Predefined type for button"}),"\n",(0,s.jsx)(t.h3,{id:"text",children:(0,s.jsx)(t.code,{children:"text"})}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsx)(t.tr,{children:(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"TYPE"})})}),(0,s.jsx)(t.tbody,{children:(0,s.jsx)(t.tr,{children:(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"string"})})})]}),"\n",(0,s.jsx)(t.p,{children:"Text of button"}),"\n",(0,s.jsx)(t.h3,{id:"textstyle",children:(0,s.jsx)(t.code,{children:"textStyle"})}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsx)(t.tr,{children:(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"TYPE"})})}),(0,s.jsx)(t.tbody,{children:(0,s.jsx)(t.tr,{children:(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.a,{href:"https://reactnative.dev/docs/text-style-props#props",children:"TextStyle"})})})})]}),"\n",(0,s.jsx)(t.p,{children:"Custom styles for textInputContainer"}),"\n",(0,s.jsx)(t.h3,{id:"textprops",children:(0,s.jsx)(t.code,{children:"textProps"})}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsx)(t.tr,{children:(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"TYPE"})})}),(0,s.jsx)(t.tbody,{children:(0,s.jsx)(t.tr,{children:(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.a,{href:"https://reactnative.dev/docs/text#props",children:"TextProps"})})})})]}),"\n",(0,s.jsx)(t.p,{children:"Custom props for text inside button"}),"\n",(0,s.jsx)(t.h3,{id:"font",children:(0,s.jsx)(t.code,{children:"font"})}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsx)(t.tr,{children:(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"TYPE"})})}),(0,s.jsx)(t.tbody,{children:(0,s.jsx)(t.tr,{children:(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.a,{href:"https://github.com/lad-tech/mobydick/blob/main/packages/core/src/typography/types.ts#L49",children:"TypographyProp"})})})})]}),"\n",(0,s.jsx)(t.p,{children:"Custom styles for textInputContainer"}),"\n",(0,s.jsx)(t.h3,{id:"loading",children:(0,s.jsx)(t.code,{children:"loading"})}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsx)(t.tr,{children:(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"TYPE"})})}),(0,s.jsx)(t.tbody,{children:(0,s.jsx)(t.tr,{children:(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"boolean"})})})]}),"\n",(0,s.jsx)(t.p,{children:"Loading preset of button"}),"\n",(0,s.jsx)(t.h3,{id:"count",children:(0,s.jsx)(t.code,{children:"count"})}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsx)(t.tr,{children:(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"TYPE"})})}),(0,s.jsx)(t.tbody,{children:(0,s.jsx)(t.tr,{children:(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"number"})})})]}),"\n",(0,s.jsx)(t.p,{children:"Number of count"}),"\n",(0,s.jsx)(t.h3,{id:"lefticon",children:(0,s.jsx)(t.code,{children:"leftIcon"})}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsx)(t.tr,{children:(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"TYPE"})})}),(0,s.jsx)(t.tbody,{children:(0,s.jsx)(t.tr,{children:(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"ReactElement"})})})]}),"\n",(0,s.jsx)(t.p,{children:"any react component placed right"}),"\n",(0,s.jsx)(t.h3,{id:"righticon",children:(0,s.jsx)(t.code,{children:"rightIcon"})}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsx)(t.tr,{children:(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"TYPE"})})}),(0,s.jsx)(t.tbody,{children:(0,s.jsx)(t.tr,{children:(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"ReactElement"})})})]}),"\n",(0,s.jsx)(t.p,{children:"any react component placed right"})]})}function u(e={}){const{wrapper:t}={...(0,l.a)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}}}]);