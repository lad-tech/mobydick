"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2766],{6259:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>d,toc:()=>x});var s=t(5893),r=t(1151);const l=t.p+"assets/medias/CodeInput-89af0e5c3bc927fc8b2530e92ccafbab.mov";var c=t(2004),i=t.n(c);const o={},a=void 0,d={id:"components/core/inputs/CodeField",title:"CodeField",description:"Reusable CodeField",source:"@site/docs/components/core/inputs/CodeField.mdx",sourceDirName:"components/core/inputs",slug:"/components/core/inputs/CodeField",permalink:"/mobydick/docs/components/core/inputs/CodeField",draft:!1,unlisted:!1,editUrl:"https://github.com/lad-tech/mobydick/tree/main/docs/docs/components/core/inputs/CodeField.mdx",tags:[],version:"current",frontMatter:{},sidebar:"componentsSidebar",previous:{title:"Base",permalink:"/mobydick/docs/components/core/inputs/Base"},next:{title:"DropDown",permalink:"/mobydick/docs/components/core/inputs/DropDown"}},h={},x=[{value:"Example",id:"example",level:2},{value:"<code>Props</code>",id:"props",level:2},{value:"<code>TextInput Props</code>",id:"textinput-props",level:3},{value:"<code>containerStyle</code>",id:"containerstyle",level:3},{value:"<code>textInputContainerStyle</code>",id:"textinputcontainerstyle",level:3},{value:"<code>editable</code>",id:"editable",level:3},{value:"<code>maxLength</code>",id:"maxlength",level:3},{value:"<code>fontStyleCodeField</code>",id:"fontstylecodefield",level:3},{value:"<code>onChangeText</code>",id:"onchangetext",level:3},{value:"<code>onBackKeyPress</code>",id:"onbackkeypress",level:3}];function p(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.a)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Reusable CodeField"}),"\n","\n","\n",(0,s.jsx)(i(),{playing:!0,controls:!0,url:l}),"\n",(0,s.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:"import {useCallback, useRef, useState} from 'react';\nimport {Keyboard, TextInput} from 'react-native';\n\nimport {CodeField, createStyles, useStyles, View} from '@lad-tech/mobydick-core';\n\nconst Verification = () => {\n  const [styles] = useStyles(styleSource);\n  const input0 = useRef<TextInput>(null);\n  const input1 = useRef<TextInput>(null);\n  const input2 = useRef<TextInput>(null);\n  const input3 = useRef<TextInput>(null);\n\n  const [char0, writeChar0] = useState<string>('');\n  const [char1, writeChar1] = useState<string>('');\n  const [char2, writeChar2] = useState<string>('');\n  const [char3, writeChar3] = useState<string>('');\n\n  const onLayout = useCallback(() => input0?.current?.focus(), []);\n\n  const onChangeText0 = useCallback((text: string) => {\n    writeChar0(text);\n    text.length && input1.current?.focus();\n  }, []);\n  const onBackKeyPress0 = useCallback(() => {\n    if (char0 === '') {\n      Keyboard.dismiss();\n    }\n  }, [char0]);\n\n  const onChangeText1 = useCallback((text: string) => {\n    writeChar1(text);\n    text.length && input2.current?.focus();\n  }, []);\n\n  const onBackKeyPress1 = useCallback(() => {\n    if (char1 === '') {\n      input0.current?.focus();\n    }\n  }, [char1]);\n\n  const onChangeText2 = useCallback((text: string) => {\n    writeChar2(text);\n    text.length && input3.current?.focus();\n  }, []);\n  const onBackKeyPress2 = useCallback(() => {\n    if (char2 === '') {\n      input1.current?.focus();\n    }\n  }, [char2]);\n\n  const onChangeText3 = useCallback((text: string) => {\n    writeChar3(text);\n    text.length && Keyboard.dismiss();\n  }, []);\n  const onBackKeyPress3 = useCallback(() => {\n    if (char3 === '') {\n      input2.current?.focus();\n    }\n  }, [char3]);\n\n  return (\n    <View style={styles.container} onLayout={onLayout}>\n      <CodeField\n        value={char0}\n        ref={input0}\n        onChangeText={onChangeText0}\n        onBackKeyPress={onBackKeyPress0}\n        textInputContainerStyle={styles.textInputContainerStyle}\n        selection={{start: char0.length, end: char0.length}}\n      />\n      <CodeField\n        value={char1}\n        ref={input1}\n        onChangeText={onChangeText1}\n        onBackKeyPress={onBackKeyPress1}\n        selection={{start: char1.length, end: char1.length}}\n      />\n      <View style={styles.borderStyle} />\n      <CodeField\n        value={char2}\n        ref={input2}\n        onChangeText={onChangeText2}\n        onBackKeyPress={onBackKeyPress2}\n        textInputContainerStyle={styles.textInputContainerStyle}\n        selection={{start: char2.length, end: char2.length}}\n      />\n      <CodeField\n        value={char3}\n        ref={input3}\n        onChangeText={onChangeText3}\n        onBackKeyPress={onBackKeyPress3}\n        selection={{start: char3.length, end: char3.length}}\n      />\n    </View>\n  );\n};\n\nconst styleSource = createStyles(theme => {\n  const {colors, spaces} = theme;\n  return {\n    wrapper: {\n      gap: spaces.Space12,\n    },\n    container: {\n      flexDirection: 'row',\n      justifyContent: 'center',\n      alignItems: 'center',\n      marginBottom: spaces.Space12,\n    },\n    textInputContainerStyle: {\n      marginRight: spaces.Space12,\n    },\n    borderStyle: {\n      width: spaces.Space16,\n      height: spaces.Space2,\n      backgroundColor: colors.BorderNormal,\n      marginHorizontal: spaces.Space6,\n    },\n  };\n});\n\nexport default Verification;\n\n"})}),"\n",(0,s.jsx)(n.h2,{id:"props",children:(0,s.jsx)(n.code,{children:"Props"})}),"\n",(0,s.jsx)(n.h3,{id:"textinput-props",children:(0,s.jsx)(n.a,{href:"https://reactnative.dev/docs/textinput#props",children:(0,s.jsx)(n.code,{children:"TextInput Props"})})}),"\n",(0,s.jsxs)(n.p,{children:["Inherits ",(0,s.jsx)(n.a,{href:"https://reactnative.dev/docs/textinput#props",children:"TextInput Props"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"containerstyle",children:(0,s.jsx)(n.code,{children:"containerStyle"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsx)(n.tr,{children:(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Type"})})}),(0,s.jsx)(n.tbody,{children:(0,s.jsx)(n.tr,{children:(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.a,{href:"https://reactnative.dev/docs/view-style-props#props",children:"ViewStyle"})})})})]}),"\n",(0,s.jsx)(n.p,{children:"Custom styles for container"}),"\n",(0,s.jsx)(n.h3,{id:"textinputcontainerstyle",children:(0,s.jsx)(n.code,{children:"textInputContainerStyle"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsx)(n.tr,{children:(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Type"})})}),(0,s.jsx)(n.tbody,{children:(0,s.jsx)(n.tr,{children:(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.a,{href:"https://reactnative.dev/docs/view-style-props#props",children:"ViewStyle"})})})})]}),"\n",(0,s.jsx)(n.p,{children:"Custom styles for textInputContainer"}),"\n",(0,s.jsx)(n.h3,{id:"editable",children:(0,s.jsx)(n.code,{children:"editable"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsx)(n.tr,{children:(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Type"})})}),(0,s.jsx)(n.tbody,{children:(0,s.jsx)(n.tr,{children:(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"boolean"})})})]}),"\n",(0,s.jsx)(n.p,{children:"If false, text is not editable. The default value is true."}),"\n",(0,s.jsx)(n.h3,{id:"maxlength",children:(0,s.jsx)(n.code,{children:"maxLength"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsx)(n.tr,{children:(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Type"})})}),(0,s.jsx)(n.tbody,{children:(0,s.jsx)(n.tr,{children:(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"number"})})})]}),"\n",(0,s.jsx)(n.p,{children:"Input length"}),"\n",(0,s.jsx)(n.h3,{id:"fontstylecodefield",children:(0,s.jsx)(n.code,{children:"fontStyleCodeField"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsx)(n.tr,{children:(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Type"})})}),(0,s.jsx)(n.tbody,{children:(0,s.jsx)(n.tr,{children:(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.a,{href:"https://github.com/lad-tech/mobydick/blob/main/packages/core/src/typography/types.ts#L49",children:"TypographyProp"})})})})]}),"\n",(0,s.jsx)(n.p,{children:"Font for input"}),"\n",(0,s.jsx)(n.h3,{id:"onchangetext",children:(0,s.jsx)(n.code,{children:"onChangeText"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsx)(n.tr,{children:(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Type"})})}),(0,s.jsx)(n.tbody,{children:(0,s.jsx)(n.tr,{children:(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"(test: string) => void"})})})]}),"\n",(0,s.jsx)(n.p,{children:"Callback onChangeText"}),"\n",(0,s.jsx)(n.h3,{id:"onbackkeypress",children:(0,s.jsx)(n.code,{children:"onBackKeyPress"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsx)(n.tr,{children:(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Type"})})}),(0,s.jsx)(n.tbody,{children:(0,s.jsx)(n.tr,{children:(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"() => void"})})})]}),"\n",(0,s.jsx)(n.p,{children:"Callback delete letter"})]})}function u(e={}){const{wrapper:n}={...(0,r.a)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}}}]);